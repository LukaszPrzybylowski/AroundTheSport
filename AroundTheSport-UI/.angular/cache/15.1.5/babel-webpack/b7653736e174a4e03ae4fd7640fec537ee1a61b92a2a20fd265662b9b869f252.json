{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { ApplicationUserCreate } from 'src/app/models/account/application-user-create.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction RegisterComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Full Name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 1-30 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 1-30 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 1-30 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const profession_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(profession_r16);\n  }\n}\nfunction RegisterComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Profession is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 5-20 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Username is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 5-20 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Email is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Invalid email format \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Can be at most 30 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Must be between 10-50 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Confirm Password is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtext(1, \" Password do not match \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"is-invalid\": a0,\n    \"is-valid\": a1\n  };\n};\nexport class RegisterComponent {\n  constructor(accountService, router, formBuilder) {\n    this.accountService = accountService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.professions = [\"Trainer\", \"Dietician\", \"Physiotherapist\", \"Gym owner\", \"Quest\"];\n    this.allProfessions = ['Trainer', 'Dietician', 'Physiotherapist', 'Gym owner', 'Quest'];\n    this.matchValue = fg => {\n      const password = fg.get('password').value;\n      const confirmPassword = fg.get('confirmPassword').value;\n      return password === confirmPassword ? null : {\n        isMatching: true\n      };\n    };\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      fullname: [null, [Validators.required, Validators.minLength(1), Validators.maxLength(30)]],\n      lastname: [null, [Validators.minLength(1), Validators.maxLength(30)]],\n      company: [null, [Validators.maxLength(30)]],\n      profession: [null, [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\n      email: [null, [Validators.required, Validators.pattern(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i), Validators.maxLength(30)]],\n      username: [null, [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\n      password: [null, [Validators.required, Validators.minLength(10), Validators.maxLength(50)]],\n      confirmPassword: [null, [Validators.required]]\n    }, {\n      validators: this.matchValue\n    });\n  }\n  changeProfession(e) {\n    console.log(this.registerForm.value);\n  }\n  formHasError(error) {\n    return !!this.registerForm.hasError(error);\n  }\n  isTouched(field) {\n    return this.registerForm.get(field).touched;\n  }\n  hasErrors(field) {\n    return this.registerForm.get(field).errors;\n  }\n  hasError(field, error) {\n    return !!this.registerForm.get(field).hasError(error);\n  }\n  onSubmit() {\n    let applicationUserCreate = new ApplicationUserCreate(this.registerForm.get('username').value, this.registerForm.get('password').value, this.registerForm.get('email').value, this.registerForm.get('profession').value, this.registerForm.get('fullname').value, this.registerForm.get('lastname').value, this.registerForm.get('company').value);\n    this.accountService.register(applicationUserCreate).subscribe(() => {\n      this.router.navigate(['/dashboard']);\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 49,\n  vars: 50,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\", \"mt-5\"], [1, \"text-light\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"type\", \"text\", \"formControlName\", \"fullname\", \"placeholder\", \"Full Name*\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [1, \"form-group\", \"mt-2\"], [\"type\", \"text\", \"formControlName\", \"lastname\", \"placeholder\", \"Last Name\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"type\", \"text\", \"formControlName\", \"company\", \"placeholder\", \"Company\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"for\", \"profession\"], [\"formControlName\", \"profession\", 1, \"form-control\", 3, \"ngClass\", \"change\"], [\"disabled\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"formControlName\", \"username\", \"placeholder\", \"Username*\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"type\", \"text\", \"formControlName\", \"email\", \"placeholder\", \"Email*\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password*\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirm Password*\", 1, \"form-control\", \"form-control-lg\", 3, \"ngClass\"], [1, \"d-grid\", \"gap-2\"], [1, \"btn\", \"btn-block\", \"mb-3\", \"text-dark\", \"mt-2\", 3, \"disabled\"], [1, \"invalid-feedback\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\", 3);\n      i0.ɵɵtext(4, \"Don't Have An Account?\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"p\", 3);\n      i0.ɵɵtext(6, \"Just fill out the form and register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(8, \"div\", 5);\n      i0.ɵɵelement(9, \"input\", 6);\n      i0.ɵɵtemplate(10, RegisterComponent_div_10_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(11, RegisterComponent_div_11_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 8);\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵtemplate(14, RegisterComponent_div_14_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8);\n      i0.ɵɵelement(16, \"input\", 10);\n      i0.ɵɵtemplate(17, RegisterComponent_div_17_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 8)(19, \"label\", 11);\n      i0.ɵɵtext(20, \"Profession*:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"select\", 12);\n      i0.ɵɵlistener(\"change\", function RegisterComponent_Template_select_change_21_listener($event) {\n        return ctx.changeProfession($event);\n      });\n      i0.ɵɵelementStart(22, \"option\", 13);\n      i0.ɵɵtext(23, \"Select Profession\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"option\");\n      i0.ɵɵtext(25, \"Choose Profession\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(26, RegisterComponent_option_26_Template, 2, 1, \"option\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(27, RegisterComponent_div_27_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(28, RegisterComponent_div_28_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 8);\n      i0.ɵɵelement(30, \"input\", 15);\n      i0.ɵɵtemplate(31, RegisterComponent_div_31_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(32, RegisterComponent_div_32_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"div\", 8);\n      i0.ɵɵelement(34, \"input\", 16);\n      i0.ɵɵtemplate(35, RegisterComponent_div_35_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(36, RegisterComponent_div_36_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(37, RegisterComponent_div_37_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"div\", 8);\n      i0.ɵɵelement(39, \"input\", 17);\n      i0.ɵɵtemplate(40, RegisterComponent_div_40_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(41, RegisterComponent_div_41_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(42, \"div\", 8);\n      i0.ɵɵelement(43, \"input\", 18);\n      i0.ɵɵtemplate(44, RegisterComponent_div_44_Template, 2, 0, \"div\", 7);\n      i0.ɵɵtemplate(45, RegisterComponent_div_45_Template, 2, 0, \"div\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"div\", 19)(47, \"button\", 20);\n      i0.ɵɵtext(48, \"Register\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(26, _c0, ctx.hasErrors(\"fullname\") && ctx.isTouched(\"fullname\"), !ctx.hasErrors(\"fullname\") && ctx.isTouched(\"fullname\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"fullname\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"fullname\", \"minLenght\") || ctx.hasError(\"fullname\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(29, _c0, ctx.hasErrors(\"lastname\") && ctx.isTouched(\"lastname\"), !ctx.hasErrors(\"lastname\") && ctx.isTouched(\"lastname\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"lastname\", \"minLenght\") || ctx.hasError(\"lastname\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(32, _c0, ctx.hasErrors(\"company\") && ctx.isTouched(\"company\"), !ctx.hasErrors(\"company\") && ctx.isTouched(\"company\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"company\", \"minLenght\") || ctx.hasError(\"company\", \"maxLenght\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(35, _c0, ctx.hasErrors(\"profession\") && ctx.isTouched(\"profession\"), !ctx.hasErrors(\"profession\") && ctx.isTouched(\"profession\")));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.allProfessions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"profession\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"profession\", \"minLenght\") || ctx.hasError(\"profession\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(38, _c0, ctx.hasErrors(\"username\") && ctx.isTouched(\"username\"), !ctx.hasErrors(\"username\") && ctx.isTouched(\"username\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"username\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"username\", \"minLenght\") || ctx.hasError(\"username\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(41, _c0, ctx.hasErrors(\"email\") && ctx.isTouched(\"email\"), !ctx.hasErrors(\"email\") && ctx.isTouched(\"email\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"email\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"email\", \"pattern\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"email\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(44, _c0, ctx.hasErrors(\"password\") && ctx.isTouched(\"password\"), !ctx.hasErrors(\"password\") && ctx.isTouched(\"password\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"password\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"password\", \"minLenght\") || ctx.hasError(\"password\", \"maxLenght\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(47, _c0, (ctx.formHasError(\"isMatching\") || ctx.hasErrors(\"confirmPassword\")) && ctx.isTouched(\"confirmPassword\"), (!ctx.formHasError(\"isMatching\") || !ctx.hasErrors(\"confirmPassword\")) && ctx.isTouched(\"confirmPassword\")));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"confirmPassword\", \"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.formHasError(\"isMatching\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.registerForm.valid);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".container[_ngcontent-%COMP%]{\\r\\n    max-width: 100% !important;\\r\\n    min-height: 100vh;\\r\\n    background-color: black;\\r\\n    background-image: url(/assets/img/LogoFrame.png);\\r\\n    background-repeat: no-repeat;\\r\\n    background-position: center;\\r\\n    background-size: cover;\\r\\n}\\r\\n.btn[_ngcontent-%COMP%]{\\r\\n    background-color:#F3E09C;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksMEJBQTBCO0lBQzFCLGlCQUFpQjtJQUNqQix1QkFBdUI7SUFDdkIsZ0RBQWdEO0lBQ2hELDRCQUE0QjtJQUM1QiwyQkFBMkI7SUFDM0Isc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSx3QkFBd0I7QUFDNUIiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVye1xyXG4gICAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1nL0xvZ29GcmFtZS5wbmcpO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XHJcbn1cclxuLmJ0bntcclxuICAgIGJhY2tncm91bmQtY29sb3I6I0YzRTA5QztcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","ApplicationUserCreate","i0","RegisterComponent","constructor","accountService","router","formBuilder","fg","password","get","value","confirmPassword","isMatching","ngOnInit","registerForm","group","fullname","required","minLength","maxLength","lastname","company","profession","email","pattern","username","validators","matchValue","changeProfession","e","console","log","formHasError","error","hasError","isTouched","field","touched","hasErrors","errors","onSubmit","applicationUserCreate","register","subscribe","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\lukas\\OneDrive\\Pulpit\\AroundTheSport-Pro\\AroundTheSport\\AroundTheSport-UI\\src\\app\\components\\register\\register.component.ts","C:\\Users\\lukas\\OneDrive\\Pulpit\\AroundTheSport-Pro\\AroundTheSport\\AroundTheSport-UI\\src\\app\\components\\register\\register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApplicationUserCreate } from 'src/app/models/account/application-user-create.model';\nimport { AccountService } from 'src/app/services/account/account.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  registerForm!: FormGroup;\n\n  professions: string[] = [\"Trainer\", \"Dietician\", \"Physiotherapist\", \"Gym owner\", \"Quest\"]; \n\n  allProfessions: any = ['Trainer','Dietician','Physiotherapist','Gym owner','Quest'] ;\n\n  constructor(\n    private accountService: AccountService,\n    private router: Router,\n    private formBuilder: FormBuilder\n  ){\n\n  }\n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      fullname: [null, [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(30)\n\n      ]],\n      lastname: [null, [\n        Validators.minLength(1),\n        Validators.maxLength(30)\n      ]],\n      company: [null, [\n        Validators.maxLength(30)\n      ]],\n      profession: [null, [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(20)\n      ]],\n      email: [null, [\n        Validators.required,\n        Validators.pattern(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i),\n        Validators.maxLength(30)\n      ]],\n      username: [null, [\n        Validators.required,\n        Validators.minLength(5),\n        Validators.maxLength(20)\n      ]],\n      password: [null, [\n        Validators.required,\n        Validators.minLength(10),\n        Validators.maxLength(50)\n      ]],\n      confirmPassword: [null, [\n        Validators.required\n      ]]\n    }, {\n      validators: this.matchValue\n    });\n  }\n\n  changeProfession(e: any){\n    console.log(this.registerForm.value)\n  }\n\n  formHasError(error: string){\n    return !!this.registerForm.hasError(error);\n  }\n\n  isTouched(field: string){\n    return this.registerForm.get(field)!.touched;\n  }\n\n  hasErrors(field: string) {\n    return this.registerForm.get(field)!.errors;\n  }\n\n  hasError(field: string, error: string){\n    return !!this.registerForm.get(field)!.hasError(error);\n  }\n\n  matchValue: ValidatorFn = (fg: AbstractControl) => {\n    const password = fg.get('password')!.value;\n    const confirmPassword = fg.get('confirmPassword')!.value;\n    return password === confirmPassword ? null : { isMatching: true};\n  }\n\n  onSubmit(){\n    let applicationUserCreate: ApplicationUserCreate = new ApplicationUserCreate(\n      this.registerForm.get('username')!.value,\n      this.registerForm.get('password')!.value,\n      this.registerForm.get('email')!.value,\n      this.registerForm.get('profession')!.value,\n      this.registerForm.get('fullname')!.value,\n      this.registerForm.get('lastname')!.value,\n      this.registerForm.get('company')!.value,\n    );\n\n\n    this.accountService.register(applicationUserCreate).subscribe(() => {\n      this.router.navigate(['/dashboard']);\n    })\n  }\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 mt-5\">\n            \n            <h1 class=\"text-light\">Don't Have An Account?</h1>\n            <p class=\"text-light\">Just fill out the form and register</p>\n            <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n\n                <div class=\"form-group\">\n                    <input\n                        type=\"text\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('fullname') && isTouched('fullname'),\n                            'is-valid' : !hasErrors('fullname') && isTouched('fullname')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"fullname\"\n                        placeholder=\"Full Name*\">\n\n                    <div *ngIf=\"hasError('fullname', 'required')\" class=\"invalid-feedback\">\n                        Full Name is required\n                    </div>\n\n                    <div *ngIf=\"hasError('fullname', 'minLenght') || hasError('fullname', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 1-30 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"text\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('lastname') && isTouched('lastname'),\n                            'is-valid' : !hasErrors('lastname') && isTouched('lastname')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"lastname\"\n                        placeholder=\"Last Name\">\n\n                    <div *ngIf=\"hasError('lastname', 'minLenght') || hasError('lastname', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 1-30 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"text\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('company') && isTouched('company'),\n                            'is-valid' : !hasErrors('company') && isTouched('company')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"company\"\n                        placeholder=\"Company\">\n\n                    <div *ngIf=\"hasError('company', 'minLenght') || hasError('company', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 1-30 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <label for=\"profession\">Profession*:</label> \n                    <select [ngClass]=\"{'is-invalid' : hasErrors('profession') && isTouched('profession'),\n                    'is-valid' : !hasErrors('profession') && isTouched('profession')}\"\n                    formControlName=\"profession\" class=\"form-control\" \n                    (change)=\"changeProfession($event)\">\n                        <option disabled>Select Profession</option>\n                        <option>Choose Profession</option>\n                        <option *ngFor=\"let profession of allProfessions\">{{profession}}</option>\n                    </select>         \n                    <div *ngIf=\"hasError('profession', 'required')\" class=\"invalid-feedback\">\n                        Profession is required\n                    </div>\n\n                    <div *ngIf=\"hasError('profession', 'minLenght') || hasError('profession', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 5-20 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"text\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('username') && isTouched('username'),\n                            'is-valid' : !hasErrors('username') && isTouched('username')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"username\"\n                        placeholder=\"Username*\">\n\n                    <div *ngIf=\"hasError('username', 'required')\" class=\"invalid-feedback\">\n                        Username is required\n                    </div>\n\n                    <div *ngIf=\"hasError('username', 'minLenght') || hasError('username', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 5-20 characters\n                    </div>\n                </div>\n                \n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"text\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('email') && isTouched('email'),\n                            'is-valid' : !hasErrors('email') && isTouched('email')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"email\"\n                        placeholder=\"Email*\">\n\n                    <div *ngIf=\"hasError('email', 'required')\" class=\"invalid-feedback\">\n                        Email is required\n                    </div>\n\n                    <div *ngIf=\"hasError('email', 'pattern')\" class=\"invalid-feedback\">\n                        Invalid email format\n                    </div>\n\n                    <div *ngIf=\"hasError('email', 'maxLenght')\" class=\"invalid-feedback\">\n                        Can be at most 30 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"password\"\n                        [ngClass]=\"{'is-invalid' : hasErrors('password') && isTouched('password'),\n                            'is-valid' : !hasErrors('password') && isTouched('password')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"password\"\n                        placeholder=\"Password*\">\n\n                    <div *ngIf=\"hasError('password', 'required')\" class=\"invalid-feedback\">\n                        Password is required\n                    </div>\n\n                    <div *ngIf=\"hasError('password', 'minLenght') || hasError('password', 'maxLenght')\" class=\"invalid-feedback\">\n                        Must be between 10-50 characters\n                    </div>\n                </div>\n\n                <div class=\"form-group mt-2\">\n                    <input\n                        type=\"password\"\n                        [ngClass]=\"{'is-invalid' : \n                                    (formHasError('isMatching') || hasErrors('confirmPassword')) \n                                    && isTouched('confirmPassword'),\n                                    'is-valid' : \n                                    (!formHasError('isMatching') || !hasErrors('confirmPassword')) \n                                    && isTouched('confirmPassword')}\"\n                        class=\"form-control form-control-lg\"\n                        formControlName=\"confirmPassword\"\n                        placeholder=\"Confirm Password*\">\n\n                    <div *ngIf=\"hasError('confirmPassword', 'required')\" class=\"invalid-feedback\">\n                        Confirm Password is required\n                    </div>\n\n                    <div *ngIf=\"formHasError('isMatching')\" class=\"invalid-feedback\">\n                        Password do not match\n                    </div>\n                </div>\n                <div class=\"d-grid gap-2\">\n                    <button class=\"btn btn-block mb-3 text-dark mt-2\"\n                    [disabled]=\"!registerForm.valid\">Register</button>\n                </div>\n            </form>      \n        </div>\n    </div>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}